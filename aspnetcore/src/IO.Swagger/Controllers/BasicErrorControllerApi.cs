/*
 * SponTan API
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BasicErrorControllerApiController : ControllerBase
    { 
        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingDELETE")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingDELETE()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingGET")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingGET()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpHead]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingHEAD")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingHEAD()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpOptions]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingOPTIONS")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingOPTIONS()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        [HttpPatch]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingPATCH")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingPATCH()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingPOST")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingPOST()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// errorHtml
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/danielloza1108/SponTan/1.0/error")]
        [ValidateModelState]
        [SwaggerOperation("ErrorHtmlUsingPUT")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelAndView), description: "OK")]
        public virtual IActionResult ErrorHtmlUsingPUT()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelAndView));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"reference\" : true,\n  \"view\" : {\n    \"contentType\" : \"contentType\"\n  },\n  \"viewName\" : \"viewName\",\n  \"model\" : { },\n  \"modelMap\" : {\n    \"key\" : { }\n  },\n  \"empty\" : true,\n  \"status\" : \"ACCEPTED\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelAndView>(exampleJson)
                        : default(ModelAndView);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
