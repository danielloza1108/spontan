/*
 * SponTan API
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelAndView : IEquatable<ModelAndView>
    { 
        /// <summary>
        /// Gets or Sets Empty
        /// </summary>
        [DataMember(Name="empty")]
        public bool? Empty { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model")]
        public Object Model { get; set; }

        /// <summary>
        /// Gets or Sets ModelMap
        /// </summary>
        [DataMember(Name="modelMap")]
        public Dictionary<string, Object> ModelMap { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference")]
        public bool? Reference { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACCEPTEDEnum for ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTEDEnum = 0,
            /// <summary>
            /// Enum ALREADYREPORTEDEnum for ALREADY_REPORTED
            /// </summary>
            [EnumMember(Value = "ALREADY_REPORTED")]
            ALREADYREPORTEDEnum = 1,
            /// <summary>
            /// Enum BADGATEWAYEnum for BAD_GATEWAY
            /// </summary>
            [EnumMember(Value = "BAD_GATEWAY")]
            BADGATEWAYEnum = 2,
            /// <summary>
            /// Enum BADREQUESTEnum for BAD_REQUEST
            /// </summary>
            [EnumMember(Value = "BAD_REQUEST")]
            BADREQUESTEnum = 3,
            /// <summary>
            /// Enum BANDWIDTHLIMITEXCEEDEDEnum for BANDWIDTH_LIMIT_EXCEEDED
            /// </summary>
            [EnumMember(Value = "BANDWIDTH_LIMIT_EXCEEDED")]
            BANDWIDTHLIMITEXCEEDEDEnum = 4,
            /// <summary>
            /// Enum CHECKPOINTEnum for CHECKPOINT
            /// </summary>
            [EnumMember(Value = "CHECKPOINT")]
            CHECKPOINTEnum = 5,
            /// <summary>
            /// Enum CONFLICTEnum for CONFLICT
            /// </summary>
            [EnumMember(Value = "CONFLICT")]
            CONFLICTEnum = 6,
            /// <summary>
            /// Enum CONTINUEEnum for CONTINUE
            /// </summary>
            [EnumMember(Value = "CONTINUE")]
            CONTINUEEnum = 7,
            /// <summary>
            /// Enum CREATEDEnum for CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATEDEnum = 8,
            /// <summary>
            /// Enum DESTINATIONLOCKEDEnum for DESTINATION_LOCKED
            /// </summary>
            [EnumMember(Value = "DESTINATION_LOCKED")]
            DESTINATIONLOCKEDEnum = 9,
            /// <summary>
            /// Enum EXPECTATIONFAILEDEnum for EXPECTATION_FAILED
            /// </summary>
            [EnumMember(Value = "EXPECTATION_FAILED")]
            EXPECTATIONFAILEDEnum = 10,
            /// <summary>
            /// Enum FAILEDDEPENDENCYEnum for FAILED_DEPENDENCY
            /// </summary>
            [EnumMember(Value = "FAILED_DEPENDENCY")]
            FAILEDDEPENDENCYEnum = 11,
            /// <summary>
            /// Enum FORBIDDENEnum for FORBIDDEN
            /// </summary>
            [EnumMember(Value = "FORBIDDEN")]
            FORBIDDENEnum = 12,
            /// <summary>
            /// Enum FOUNDEnum for FOUND
            /// </summary>
            [EnumMember(Value = "FOUND")]
            FOUNDEnum = 13,
            /// <summary>
            /// Enum GATEWAYTIMEOUTEnum for GATEWAY_TIMEOUT
            /// </summary>
            [EnumMember(Value = "GATEWAY_TIMEOUT")]
            GATEWAYTIMEOUTEnum = 14,
            /// <summary>
            /// Enum GONEEnum for GONE
            /// </summary>
            [EnumMember(Value = "GONE")]
            GONEEnum = 15,
            /// <summary>
            /// Enum HTTPVERSIONNOTSUPPORTEDEnum for HTTP_VERSION_NOT_SUPPORTED
            /// </summary>
            [EnumMember(Value = "HTTP_VERSION_NOT_SUPPORTED")]
            HTTPVERSIONNOTSUPPORTEDEnum = 16,
            /// <summary>
            /// Enum IMUSEDEnum for IM_USED
            /// </summary>
            [EnumMember(Value = "IM_USED")]
            IMUSEDEnum = 17,
            /// <summary>
            /// Enum INSUFFICIENTSPACEONRESOURCEEnum for INSUFFICIENT_SPACE_ON_RESOURCE
            /// </summary>
            [EnumMember(Value = "INSUFFICIENT_SPACE_ON_RESOURCE")]
            INSUFFICIENTSPACEONRESOURCEEnum = 18,
            /// <summary>
            /// Enum INSUFFICIENTSTORAGEEnum for INSUFFICIENT_STORAGE
            /// </summary>
            [EnumMember(Value = "INSUFFICIENT_STORAGE")]
            INSUFFICIENTSTORAGEEnum = 19,
            /// <summary>
            /// Enum INTERNALSERVERERROREnum for INTERNAL_SERVER_ERROR
            /// </summary>
            [EnumMember(Value = "INTERNAL_SERVER_ERROR")]
            INTERNALSERVERERROREnum = 20,
            /// <summary>
            /// Enum IAMATEAPOTEnum for I_AM_A_TEAPOT
            /// </summary>
            [EnumMember(Value = "I_AM_A_TEAPOT")]
            IAMATEAPOTEnum = 21,
            /// <summary>
            /// Enum LENGTHREQUIREDEnum for LENGTH_REQUIRED
            /// </summary>
            [EnumMember(Value = "LENGTH_REQUIRED")]
            LENGTHREQUIREDEnum = 22,
            /// <summary>
            /// Enum LOCKEDEnum for LOCKED
            /// </summary>
            [EnumMember(Value = "LOCKED")]
            LOCKEDEnum = 23,
            /// <summary>
            /// Enum LOOPDETECTEDEnum for LOOP_DETECTED
            /// </summary>
            [EnumMember(Value = "LOOP_DETECTED")]
            LOOPDETECTEDEnum = 24,
            /// <summary>
            /// Enum METHODFAILUREEnum for METHOD_FAILURE
            /// </summary>
            [EnumMember(Value = "METHOD_FAILURE")]
            METHODFAILUREEnum = 25,
            /// <summary>
            /// Enum METHODNOTALLOWEDEnum for METHOD_NOT_ALLOWED
            /// </summary>
            [EnumMember(Value = "METHOD_NOT_ALLOWED")]
            METHODNOTALLOWEDEnum = 26,
            /// <summary>
            /// Enum MOVEDPERMANENTLYEnum for MOVED_PERMANENTLY
            /// </summary>
            [EnumMember(Value = "MOVED_PERMANENTLY")]
            MOVEDPERMANENTLYEnum = 27,
            /// <summary>
            /// Enum MOVEDTEMPORARILYEnum for MOVED_TEMPORARILY
            /// </summary>
            [EnumMember(Value = "MOVED_TEMPORARILY")]
            MOVEDTEMPORARILYEnum = 28,
            /// <summary>
            /// Enum MULTIPLECHOICESEnum for MULTIPLE_CHOICES
            /// </summary>
            [EnumMember(Value = "MULTIPLE_CHOICES")]
            MULTIPLECHOICESEnum = 29,
            /// <summary>
            /// Enum MULTISTATUSEnum for MULTI_STATUS
            /// </summary>
            [EnumMember(Value = "MULTI_STATUS")]
            MULTISTATUSEnum = 30,
            /// <summary>
            /// Enum NETWORKAUTHENTICATIONREQUIREDEnum for NETWORK_AUTHENTICATION_REQUIRED
            /// </summary>
            [EnumMember(Value = "NETWORK_AUTHENTICATION_REQUIRED")]
            NETWORKAUTHENTICATIONREQUIREDEnum = 31,
            /// <summary>
            /// Enum NONAUTHORITATIVEINFORMATIONEnum for NON_AUTHORITATIVE_INFORMATION
            /// </summary>
            [EnumMember(Value = "NON_AUTHORITATIVE_INFORMATION")]
            NONAUTHORITATIVEINFORMATIONEnum = 32,
            /// <summary>
            /// Enum NOTACCEPTABLEEnum for NOT_ACCEPTABLE
            /// </summary>
            [EnumMember(Value = "NOT_ACCEPTABLE")]
            NOTACCEPTABLEEnum = 33,
            /// <summary>
            /// Enum NOTEXTENDEDEnum for NOT_EXTENDED
            /// </summary>
            [EnumMember(Value = "NOT_EXTENDED")]
            NOTEXTENDEDEnum = 34,
            /// <summary>
            /// Enum NOTFOUNDEnum for NOT_FOUND
            /// </summary>
            [EnumMember(Value = "NOT_FOUND")]
            NOTFOUNDEnum = 35,
            /// <summary>
            /// Enum NOTIMPLEMENTEDEnum for NOT_IMPLEMENTED
            /// </summary>
            [EnumMember(Value = "NOT_IMPLEMENTED")]
            NOTIMPLEMENTEDEnum = 36,
            /// <summary>
            /// Enum NOTMODIFIEDEnum for NOT_MODIFIED
            /// </summary>
            [EnumMember(Value = "NOT_MODIFIED")]
            NOTMODIFIEDEnum = 37,
            /// <summary>
            /// Enum NOCONTENTEnum for NO_CONTENT
            /// </summary>
            [EnumMember(Value = "NO_CONTENT")]
            NOCONTENTEnum = 38,
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 39,
            /// <summary>
            /// Enum PARTIALCONTENTEnum for PARTIAL_CONTENT
            /// </summary>
            [EnumMember(Value = "PARTIAL_CONTENT")]
            PARTIALCONTENTEnum = 40,
            /// <summary>
            /// Enum PAYLOADTOOLARGEEnum for PAYLOAD_TOO_LARGE
            /// </summary>
            [EnumMember(Value = "PAYLOAD_TOO_LARGE")]
            PAYLOADTOOLARGEEnum = 41,
            /// <summary>
            /// Enum PAYMENTREQUIREDEnum for PAYMENT_REQUIRED
            /// </summary>
            [EnumMember(Value = "PAYMENT_REQUIRED")]
            PAYMENTREQUIREDEnum = 42,
            /// <summary>
            /// Enum PERMANENTREDIRECTEnum for PERMANENT_REDIRECT
            /// </summary>
            [EnumMember(Value = "PERMANENT_REDIRECT")]
            PERMANENTREDIRECTEnum = 43,
            /// <summary>
            /// Enum PRECONDITIONFAILEDEnum for PRECONDITION_FAILED
            /// </summary>
            [EnumMember(Value = "PRECONDITION_FAILED")]
            PRECONDITIONFAILEDEnum = 44,
            /// <summary>
            /// Enum PRECONDITIONREQUIREDEnum for PRECONDITION_REQUIRED
            /// </summary>
            [EnumMember(Value = "PRECONDITION_REQUIRED")]
            PRECONDITIONREQUIREDEnum = 45,
            /// <summary>
            /// Enum PROCESSINGEnum for PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSINGEnum = 46,
            /// <summary>
            /// Enum PROXYAUTHENTICATIONREQUIREDEnum for PROXY_AUTHENTICATION_REQUIRED
            /// </summary>
            [EnumMember(Value = "PROXY_AUTHENTICATION_REQUIRED")]
            PROXYAUTHENTICATIONREQUIREDEnum = 47,
            /// <summary>
            /// Enum REQUESTEDRANGENOTSATISFIABLEEnum for REQUESTED_RANGE_NOT_SATISFIABLE
            /// </summary>
            [EnumMember(Value = "REQUESTED_RANGE_NOT_SATISFIABLE")]
            REQUESTEDRANGENOTSATISFIABLEEnum = 48,
            /// <summary>
            /// Enum REQUESTENTITYTOOLARGEEnum for REQUEST_ENTITY_TOO_LARGE
            /// </summary>
            [EnumMember(Value = "REQUEST_ENTITY_TOO_LARGE")]
            REQUESTENTITYTOOLARGEEnum = 49,
            /// <summary>
            /// Enum REQUESTHEADERFIELDSTOOLARGEEnum for REQUEST_HEADER_FIELDS_TOO_LARGE
            /// </summary>
            [EnumMember(Value = "REQUEST_HEADER_FIELDS_TOO_LARGE")]
            REQUESTHEADERFIELDSTOOLARGEEnum = 50,
            /// <summary>
            /// Enum REQUESTTIMEOUTEnum for REQUEST_TIMEOUT
            /// </summary>
            [EnumMember(Value = "REQUEST_TIMEOUT")]
            REQUESTTIMEOUTEnum = 51,
            /// <summary>
            /// Enum REQUESTURITOOLONGEnum for REQUEST_URI_TOO_LONG
            /// </summary>
            [EnumMember(Value = "REQUEST_URI_TOO_LONG")]
            REQUESTURITOOLONGEnum = 52,
            /// <summary>
            /// Enum RESETCONTENTEnum for RESET_CONTENT
            /// </summary>
            [EnumMember(Value = "RESET_CONTENT")]
            RESETCONTENTEnum = 53,
            /// <summary>
            /// Enum SEEOTHEREnum for SEE_OTHER
            /// </summary>
            [EnumMember(Value = "SEE_OTHER")]
            SEEOTHEREnum = 54,
            /// <summary>
            /// Enum SERVICEUNAVAILABLEEnum for SERVICE_UNAVAILABLE
            /// </summary>
            [EnumMember(Value = "SERVICE_UNAVAILABLE")]
            SERVICEUNAVAILABLEEnum = 55,
            /// <summary>
            /// Enum SWITCHINGPROTOCOLSEnum for SWITCHING_PROTOCOLS
            /// </summary>
            [EnumMember(Value = "SWITCHING_PROTOCOLS")]
            SWITCHINGPROTOCOLSEnum = 56,
            /// <summary>
            /// Enum TEMPORARYREDIRECTEnum for TEMPORARY_REDIRECT
            /// </summary>
            [EnumMember(Value = "TEMPORARY_REDIRECT")]
            TEMPORARYREDIRECTEnum = 57,
            /// <summary>
            /// Enum TOOEARLYEnum for TOO_EARLY
            /// </summary>
            [EnumMember(Value = "TOO_EARLY")]
            TOOEARLYEnum = 58,
            /// <summary>
            /// Enum TOOMANYREQUESTSEnum for TOO_MANY_REQUESTS
            /// </summary>
            [EnumMember(Value = "TOO_MANY_REQUESTS")]
            TOOMANYREQUESTSEnum = 59,
            /// <summary>
            /// Enum UNAUTHORIZEDEnum for UNAUTHORIZED
            /// </summary>
            [EnumMember(Value = "UNAUTHORIZED")]
            UNAUTHORIZEDEnum = 60,
            /// <summary>
            /// Enum UNAVAILABLEFORLEGALREASONSEnum for UNAVAILABLE_FOR_LEGAL_REASONS
            /// </summary>
            [EnumMember(Value = "UNAVAILABLE_FOR_LEGAL_REASONS")]
            UNAVAILABLEFORLEGALREASONSEnum = 61,
            /// <summary>
            /// Enum UNPROCESSABLEENTITYEnum for UNPROCESSABLE_ENTITY
            /// </summary>
            [EnumMember(Value = "UNPROCESSABLE_ENTITY")]
            UNPROCESSABLEENTITYEnum = 62,
            /// <summary>
            /// Enum UNSUPPORTEDMEDIATYPEEnum for UNSUPPORTED_MEDIA_TYPE
            /// </summary>
            [EnumMember(Value = "UNSUPPORTED_MEDIA_TYPE")]
            UNSUPPORTEDMEDIATYPEEnum = 63,
            /// <summary>
            /// Enum UPGRADEREQUIREDEnum for UPGRADE_REQUIRED
            /// </summary>
            [EnumMember(Value = "UPGRADE_REQUIRED")]
            UPGRADEREQUIREDEnum = 64,
            /// <summary>
            /// Enum URITOOLONGEnum for URI_TOO_LONG
            /// </summary>
            [EnumMember(Value = "URI_TOO_LONG")]
            URITOOLONGEnum = 65,
            /// <summary>
            /// Enum USEPROXYEnum for USE_PROXY
            /// </summary>
            [EnumMember(Value = "USE_PROXY")]
            USEPROXYEnum = 66,
            /// <summary>
            /// Enum VARIANTALSONEGOTIATESEnum for VARIANT_ALSO_NEGOTIATES
            /// </summary>
            [EnumMember(Value = "VARIANT_ALSO_NEGOTIATES")]
            VARIANTALSONEGOTIATESEnum = 67        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name="view")]
        public View View { get; set; }

        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name="viewName")]
        public string ViewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelAndView {\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ModelMap: ").Append(ModelMap).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelAndView)obj);
        }

        /// <summary>
        /// Returns true if ModelAndView instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelAndView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelAndView other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Empty == other.Empty ||
                    Empty != null &&
                    Empty.Equals(other.Empty)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    ModelMap == other.ModelMap ||
                    ModelMap != null &&
                    ModelMap.SequenceEqual(other.ModelMap)
                ) && 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    View == other.View ||
                    View != null &&
                    View.Equals(other.View)
                ) && 
                (
                    ViewName == other.ViewName ||
                    ViewName != null &&
                    ViewName.Equals(other.ViewName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Empty != null)
                    hashCode = hashCode * 59 + Empty.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (ModelMap != null)
                    hashCode = hashCode * 59 + ModelMap.GetHashCode();
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (View != null)
                    hashCode = hashCode * 59 + View.GetHashCode();
                    if (ViewName != null)
                    hashCode = hashCode * 59 + ViewName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelAndView left, ModelAndView right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelAndView left, ModelAndView right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
