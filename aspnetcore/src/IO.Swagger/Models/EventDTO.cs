/*
 * SponTan API
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EventDTO : IEquatable<EventDTO>
    { 
        /// <summary>
        /// Gets or Sets DurationOfTheEvent
        /// </summary>
        [DataMember(Name="durationOfTheEvent")]
        public DateTime? DurationOfTheEvent { get; set; }

        /// <summary>
        /// Gets or Sets EventPlace
        /// </summary>
        [DataMember(Name="eventPlace")]
        public string EventPlace { get; set; }

        /// <summary>
        /// Gets or Sets EventStart
        /// </summary>
        [DataMember(Name="eventStart")]
        public DateTime? EventStart { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets QuantityOfPlayers
        /// </summary>
        [DataMember(Name="quantityOfPlayers")]
        public int? QuantityOfPlayers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDTO {\n");
            sb.Append("  DurationOfTheEvent: ").Append(DurationOfTheEvent).Append("\n");
            sb.Append("  EventPlace: ").Append(EventPlace).Append("\n");
            sb.Append("  EventStart: ").Append(EventStart).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QuantityOfPlayers: ").Append(QuantityOfPlayers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventDTO)obj);
        }

        /// <summary>
        /// Returns true if EventDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of EventDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DurationOfTheEvent == other.DurationOfTheEvent ||
                    DurationOfTheEvent != null &&
                    DurationOfTheEvent.Equals(other.DurationOfTheEvent)
                ) && 
                (
                    EventPlace == other.EventPlace ||
                    EventPlace != null &&
                    EventPlace.Equals(other.EventPlace)
                ) && 
                (
                    EventStart == other.EventStart ||
                    EventStart != null &&
                    EventStart.Equals(other.EventStart)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    QuantityOfPlayers == other.QuantityOfPlayers ||
                    QuantityOfPlayers != null &&
                    QuantityOfPlayers.Equals(other.QuantityOfPlayers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DurationOfTheEvent != null)
                    hashCode = hashCode * 59 + DurationOfTheEvent.GetHashCode();
                    if (EventPlace != null)
                    hashCode = hashCode * 59 + EventPlace.GetHashCode();
                    if (EventStart != null)
                    hashCode = hashCode * 59 + EventStart.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (QuantityOfPlayers != null)
                    hashCode = hashCode * 59 + QuantityOfPlayers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventDTO left, EventDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventDTO left, EventDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
